name: limap

on:
  push:
    branches:
      - main
      - release/*
  pull_request:
    types: [ assigned, opened, synchronize, reopened ]
  release:
    types: [ published, edited ]

jobs:
  build:
    name: ${{ matrix.config.os }} ${{ matrix.config.arch }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config: [
              {os: ubuntu-latest},
        ]
    env:
      COMPILER_CACHE_VERSION: 1
      COMPILER_CACHE_DIR: ${{ github.workspace }}/compiler-cache
      CCACHE_DIR: ${{ github.workspace }}/compiler-cache/ccache
      CCACHE_BASEDIR: ${{ github.workspace }}
      # For faster builds in PRs, skip all but the latest Python versions.
      PULL_REQUEST_CIBW_BUILD: cp39-{manylinux}*
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache-builds
        with:
          key: limap-v${{ env.COMPILER_CACHE_VERSION }}-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ github.run_id }}-${{ github.run_number }}
          restore-keys: limap-v${{ env.COMPILER_CACHE_VERSION }}-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: ${{ env.COMPILER_CACHE_DIR }}

      - name: Set env (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            libboost-program-options-dev \
            libboost-graph-dev \
            libboost-system-dev \
            libeigen3-dev \
            libceres-dev \
            libflann-dev \
            libfreeimage-dev \
            libmetis-dev \
            libgoogle-glog-dev \
            libgtest-dev \
            libgmock-dev \
            libsqlite3-dev \
            libglew-dev \
            qtbase5-dev \
            libqt5opengl5-dev \
            libcgal-dev \
            libcgal-qt5-dev \
            libgl1-mesa-dri \
            libunwind-dev \
            xvfb

          if [ "${{ matrix.config.cudaEnabled }}" == "true" ]; then
            if [ "${{ matrix.config.os }}" == "ubuntu-20.04" ]; then
              sudo apt-get install -y \
                nvidia-cuda-toolkit \
                nvidia-cuda-toolkit-gcc
              echo "CC=/usr/bin/cuda-gcc" >> $GITHUB_ENV
              echo "CXX=/usr/bin/cuda-g++" >> $GITHUB_ENV
            elif [ "${{ matrix.config.os }}" == "ubuntu-22.04" ]; then
              sudo apt-get install -y \
                nvidia-cuda-toolkit \
                nvidia-cuda-toolkit-gcc \
                gcc-10 g++-10
              echo "CC=/usr/bin/gcc-10" >> $GITHUB_ENV
              echo "CXX=/usr/bin/g++-10" >> $GITHUB_ENV
              echo "CUDAHOSTCXX=/usr/bin/g++-10" >> $GITHUB_ENV
            fi
          fi

          VCPKG_TARGET_TRIPLET="x64-linux-release"
          echo "VCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}" >> "$GITHUB_ENV"

          VCPKG_INSTALLATION_ROOT="${{ github.workspace }}/vcpkg"
          CMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          echo "VCPKG_INSTALLATION_ROOT=${VCPKG_INSTALLATION_ROOT}" >> "$GITHUB_ENV"
          echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> "$GITHUB_ENV"

          # Fix: cibuildhweel cannot interpolate env variables.
          CONFIG_SETTINGS="cmake.define.CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}"
          CONFIG_SETTINGS="${CONFIG_SETTINGS} cmake.define.VCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}"
          CONFIG_SETTINGS="${CONFIG_SETTINGS} cmake.define.VCPKG_INSTALLED_DIR=/project/build/vcpkg_installed"
          echo "CIBW_CONFIG_SETTINGS_LINUX=${CONFIG_SETTINGS}" >> "$GITHUB_ENV"

          # Remap caching paths to the container
          CONTAINER_COMPILER_CACHE_DIR="/compiler-cache"
          CIBW_CONTAINER_ENGINE="docker; create_args: -v ${COMPILER_CACHE_DIR}:${CONTAINER_COMPILER_CACHE_DIR}"
          echo "CIBW_CONTAINER_ENGINE=${CIBW_CONTAINER_ENGINE}" >> "$GITHUB_ENV"
          echo "CONTAINER_COMPILER_CACHE_DIR=${CONTAINER_COMPILER_CACHE_DIR}" >> "$GITHUB_ENV"
          echo "CCACHE_DIR=${CONTAINER_COMPILER_CACHE_DIR}/ccache" >> "$GITHUB_ENV"
          echo "CCACHE_BASEDIR=/project" >> "$GITHUB_ENV"

          # vcpkg binary caching
          VCPKG_CACHE_DIR="${CONTAINER_COMPILER_CACHE_DIR}/vcpkg"
          VCPKG_BINARY_SOURCES="clear;files,${VCPKG_CACHE_DIR},readwrite"
          echo "VCPKG_BINARY_SOURCES=${VCPKG_BINARY_SOURCES}" >> "$GITHUB_ENV"

          CIBW_ENVIRONMENT_PASS_LINUX="VCPKG_TARGET_TRIPLET VCPKG_INSTALLATION_ROOT CMAKE_TOOLCHAIN_FILE VCPKG_BINARY_SOURCES CONTAINER_COMPILER_CACHE_DIR CCACHE_DIR CCACHE_BASEDIR"
          echo "CIBW_ENVIRONMENT_PASS_LINUX=${CIBW_ENVIRONMENT_PASS_LINUX}" >> "$GITHUB_ENV"

          CIBW_MANYLINUX_X86_64_IMAGE="quay.io/pypa/manylinux_2_28_x86_64"
          echo "CIBW_MANYLINUX_X86_64_IMAGE=${CIBW_MANYLINUX_X86_64_IMAGE}" >> "$GITHUB_ENV"
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.config.arch }}
      - name: Archive wheels
        uses: actions/upload-artifact@v4
        with:
          name: limap-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: wheelhouse/limap-*.whl

  pypi-publish:
    name: Publish wheels to PyPI
    needs: build
    runs-on: ubuntu-latest
    # We publish the wheel to pypi when a new tag is pushed,
    # either by creating a new GitHub release or explictly with `git tag`
    if: ${{ github.event_name == 'release' || startsWith(github.ref, 'refs/tags') }}
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/
      - name: Move wheels
        run: mkdir ./wheelhouse && mv ./artifacts/**/*.whl ./wheelhouse/
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: ./wheelhouse/
